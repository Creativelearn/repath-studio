{:linters {:unresolved-symbol {:exclude [(malli.core/=>)]},
           :type-mismatch {:namespaces {renderer.utils.element {root? {:arities {1 {:args [:any], :ret :boolean}}},
                                                                svg? {:arities {1 {:args [:any], :ret :boolean}}},
                                                                container? {:arities {1 {:args [:any], :ret :boolean}}},
                                                                bounds {:arities {1 {:args [:any],
                                                                                     :ret :nilable/seqable}}},
                                                                offset {:arities {1 {:args [:any], :ret :seqable}}},
                                                                snapping-points {:arities {2 {:args [:any :any],
                                                                                              :ret :any}}}},
                                        renderer.utils.attribute {points->vec {:arities {1 {:args [:string],
                                                                                            :ret :vector}}},
                                                                  points->px {:arities {1 {:args [:string],
                                                                                           :ret :vector}}}},
                                        renderer.utils.math {clamp {:arities {3 {:args [:number :number :number],
                                                                                 :ret :number}}},
                                                             angle-dx {:arities {2 {:args [:number :number],
                                                                                    :ret :number}}},
                                                             angle-dy {:arities {2 {:args [:number :number],
                                                                                    :ret :number}}},
                                                             normalize-angle {:arities {1 {:args [:number],
                                                                                           :ret :number}}},
                                                             angle {:arities {2 {:args [:seqable :seqable],
                                                                                 :ret :number}}}},
                                        renderer.utils.vec {remove-nth {:arities {2 {:args [:vector :number],
                                                                                     :ret :vector}}},
                                                            add {:arities {3 {:args [:vector :any :any], :ret :vector}}},
                                                            move {:arities {3 {:args [:vector :number :number],
                                                                               :ret :vector}}},
                                                            swap {:arities {3 {:args [:vector :number :number],
                                                                               :ret :vector}}}},
                                        renderer.utils.uuid {generate {:arities {0 {:args [], :ret :keyword}}},
                                                             generate-unique {:arities {1 {:args [:fn], :ret :keyword}}}},
                                        renderer.utils.units {->fixed {:arities {1 {:args [:number], :ret :number},
                                                                                 2 {:args [:number :number],
                                                                                    :ret :number},
                                                                                 3 {:args [:number :number :number],
                                                                                    :ret :number}}},
                                                              match-unit {:arities {1 {:args [:string], :ret :string}}},
                                                              unit->px {:arities {1 {:args [:any], :ret :number}}},
                                                              valid-unit? {:arities {1 {:args [:string], :ret :boolean}}},
                                                              multiplier {:arities {1 {:args [:string], :ret :number}}},
                                                              ->unit {:arities {2 {:args [:number :string],
                                                                                   :ret :number}}},
                                                              transform {:arities {:varargs {:args [:any
                                                                                                    :fn
                                                                                                    {:op :rest,
                                                                                                     :spec :any}],
                                                                                             :ret :string,
                                                                                             :min-arity 2}}},
                                                              unit->key {:arities {1 {:args [:string], :ret :keyword}}},
                                                              ->px {:arities {2 {:args [:number :string], :ret :number}}},
                                                              parse-unit {:arities {1 {:args [:any], :ret :seqable}}}},
                                        renderer.utils.pointer {significant-drag? {:arities {3 {:args [:seqable
                                                                                                       :seqable
                                                                                                       :number],
                                                                                                :ret :boolean}}},
                                                                adjust-position {:arities {3 {:args [:number
                                                                                                     :seqable
                                                                                                     :seqable],
                                                                                              :ret :seqable}}},
                                                                lock-direction {:arities {1 {:args [:seqable],
                                                                                             :ret :seqable}}}},
                                        renderer.utils.bounds {from-bbox {:arities {1 {:args [:any],
                                                                                       :ret :nilable/seqable}}},
                                                               union {:arities {:varargs {:args [{:op :rest,
                                                                                                  :spec :seqable}],
                                                                                          :ret :seqable,
                                                                                          :min-arity 0}}},
                                                               ->dimensions {:arities {1 {:args [:seqable],
                                                                                          :ret :seqable}}},
                                                               center {:arities {1 {:args [:seqable], :ret :seqable}}},
                                                               intersect? {:arities {2 {:args [:seqable :seqable],
                                                                                        :ret :boolean}}},
                                                               contained? {:arities {2 {:args [:seqable :seqable],
                                                                                        :ret :boolean}}},
                                                               contain-point? {:arities {2 {:args [:seqable :seqable],
                                                                                            :ret :boolean}}}},
                                        renderer.utils.map {merge-common-with {:arities {:varargs {:args [:fn
                                                                                                          {:op :rest,
                                                                                                           :spec :map}],
                                                                                                   :ret :map,
                                                                                                   :min-arity 1}}},
                                                            remove-nils {:arities {1 {:args [:map], :ret :map}}}}}}}}
